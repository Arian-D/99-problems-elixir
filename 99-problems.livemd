# 99 problems

```elixir
ExUnit.start(autostart: false)
```

## Intro

I'm doing the "99 problems" in Elixir to learn the language.

* [99 Lisp Problems](https://www.ic.unicamp.br/~meidanis/courses/mc336/problemas-lisp/L-99_Ninety-Nine_Lisp_Problems.html)
* [99 Prolog Problems](https://www.ic.unicamp.br/~meidanis/courses/mc336/2009s2/prolog/problemas/)

## Problem 1

Find the last element of a list.

```elixir
defmodule Problem1 do
  @spec my_last(nonempty_list()) :: any()
  def my_last([last]) do
    last
  end

  def my_last([_ | tail]) do
    my_last(tail)
  end
end
```

```elixir
defmodule Problem1Tests do
  use ExUnit.Case

  test "Empty list" do
    catch_error(Problem1.my_last([]))
  end

  test "Singleton" do
    assert Problem1.my_last([:last]) == :last
  end

  test "Various lists" do
    assert Problem1.my_last([:a, :b, :c]) == :c
    assert Problem1.my_last([1, 2]) == 2
  end
end

ExUnit.run()
```

## Problem 2

```elixir
defmodule Problem2 do
  @spec last_but_one(nonempty_list()) :: nonempty_list()
  def last_but_one([last1, last2]) do
    [last1, last2]
  end

  def last_but_one([_ | tail]) do
    last_but_one(tail)
  end
end
```

```elixir
defmodule Problem2Tests do
  use ExUnit.Case

  test "Empty list" do
    catch_error(Problem2.last_but_one([]))
  end

  test "Singleton" do
    catch_error(Problem2.last_but_one([:one]))
  end

  test "Two-element list" do
    assert Problem2.last_but_one([:a, :b]) == [:a, :b]
  end

  test "Various lists" do
    assert Problem2.last_but_one([:a, :b, :c]) == [:b, :c]
    assert Problem2.last_but_one(~c"abc") == ~c"bc"
  end
end

ExUnit.run()
```

## Problem 3

```elixir
defmodule Problem3 do
  @spec element_at(nonempty_list(), pos_integer()) :: any()
  def element_at([head | _], 1) do
    head
  end

  def element_at([_ | tail], n) do
    element_at(tail, n - 1)
  end
end
```

```elixir
defmodule Problem3Tests do
  use ExUnit.Case

  test "Index out of bound failure" do
    catch_error(Problem3.element_at([], 1))
    catch_error(Problem3.element_at([:a], 2))
    catch_error(Problem3.element_at([:a, :b], -1))
  end

  test "Singleton" do
    assert Problem3.element_at([:a], 1) == :a
  end

  test "List" do
    assert Problem3.element_at([:a, :b, :c], 3) == :c
    assert Problem3.element_at(~w(ðŸ™‚ ðŸ˜¯ ðŸ˜ ), 2) == "ðŸ˜¯"
  end
end

ExUnit.run()
```

## Problem 4

```elixir
defmodule Problem4 do
  @spec list_length(list()) :: non_neg_integer()
  def list_length([]), do: 0
  def list_length([_ | tail]), do: 1 + list_length(tail)
end
```

```elixir
defmodule Problem4Tests do
  use ExUnit.Case

  test "Empty list" do
    assert Problem4.list_length([]) == 0
  end

  test "Lists" do
    assert Problem4.list_length([:one]) == 1
    assert Problem4.list_length([:first, :second]) == 2
  end
end

ExUnit.run()
```

## Problem 5

```elixir
defmodule Problem5 do
  @spec reverse(list()) :: list()
  def reverse([]), do: []
  def reverse([head | tail]), do: reverse(tail) ++ [head]
end
```

```elixir
defmodule Problem5Tests do
  use ExUnit.Case

  test "Empty list" do
    assert Problem5.reverse([]) == []
  end

  test "Various lists" do
    assert Problem5.reverse([:a, :b, :c]) == [:c, :b, :a]
    assert Problem5.reverse(~w(three two one)) == ~w(one two three)
  end
end

ExUnit.run()
```

## Problem 6

```elixir
defmodule Problem6 do
  @spec is_palindrome(list()) :: boolean()
  def is_palindrome(list), do: list == Problem5.reverse(list)
end
```

```elixir
defmodule Problem6Tests do
  use ExUnit.Case

  test "Empty list" do
    assert Problem6.is_palindrome([])
  end

  test "Various lists" do
    assert Problem6.is_palindrome([8, 0, 0, 8])
    assert Problem6.is_palindrome(~c"racecar")
  end

  test "Non palindromes" do
    refute Problem6.is_palindrome(~w(not a palindrome))
    refute Problem6.is_palindrome([:a, :b, :c])
  end
end

ExUnit.run()
```

## Problem 7

```elixir
defmodule Problem7 do
  @spec flatten(list()) :: list()
  def flatten([head | tail]) when is_list(head) do
    flatten(head) ++ flatten(tail)
  end

  def flatten([head | tail]), do: [head | flatten(tail)]
  def flatten([]), do: []
end
```

```elixir
Problem7.flatten([:a, [:b, [:c, :d], :e]])
```

## Problem 8

```elixir
defmodule Problem8 do
  @spec compress(list()) :: list()
  def compress([head, head | tail]), do: compress([head | tail])
  def compress([head | tail]), do: [head | compress(tail)]
  def compress([]), do: []
end
```

```elixir
Problem8.compress([1, 1, 1, 1, 12, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4])
```

## Problem 9 (TODO: Move to P13)

```elixir
defmodule Problem9 do
  @spec pack(list()) :: list()
  def pack([head, head | tail]), do: pack([[head, head] | tail])
  def pack([head1, head2 | tail]), do: [[head1] | pack([head2 | tail])]
  def pack([[head | tail1] | [head | tail2]]), do: [[head, head | tail1] | pack(tail2)]
  def pack([l1 | l2]) when is_list(l1) and is_list(l2), do: [l1 | pack(l2)]
  def pack([]), do: []
end
```

```elixir
Problem9.pack([1, 2, 3, 3])
```

## Problem 10

```elixir
defmodule Problem10 do
  def encode(list), do: encode(list, 1)

  defp encode([head, head | tail], count) do
    encode([head | tail], count + 1)
  end

  defp encode([head | tail], count) do
    [[count, head] | encode(tail, 1)]
  end

  defp encode([], _), do: []
end
```

```elixir
Problem10.encode(~w(a a a a b c c a a d e e e e))
```

## Problem 11

```elixir
defmodule Problem11 do
  def encode_modified(list), do: encode_modified(list, 1)

  defp encode_modified([head, head | tail], count) do
    encode_modified([head | tail], count + 1)
  end

  defp encode_modified([head | tail], 0) do
    [head | encode_modified(tail, 1)]
  end

  defp encode_modified([head | tail], count) do
    [[count, head] | encode_modified(tail, 1)]
  end

  defp encode_modified([], _), do: []
end
```

```elixir
Problem11.encode_modified(~w(a a a a b c c a a d e e e e))
```
